# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 977bdd12a9a93cead7f05e6afb1ade85a37737ce5e88eb0c9347d8b4fede50a0 # shrinks to (Term::local_pid(186, 0).unwrap(), Term::slice_to_map(&[(Term::slice_to_map(&[(Term::str_to_atom("બC🤩<=𐋣^K/%ꬋృ{Ⱥ¢rশy", DoNotCare).unwrap(), Term::slice_to_binary(&[50, 93], &process)), (446466589906357208.into_process(&process), Term::EMPTY_LIST)], &process), Term::slice_to_tuple(&[], &process)), (Term::local_reference(ID(4), 850361090887272551, &process), Term::cons(BigInt::parse_bytes(b"8830321563353617472", 10).unwrap().into_process(&process), Term::cons(Term::local_reference(ID(4), 16618892792608125499, &process), Term::str_to_atom("%\'¥\u{11cb5}﷽aໂᭀ𐹫T=É", DoNotCare).unwrap(), &process), &process))], &process))
cc 206e921d87b7eb1daa969b252c7cf6bdf7d1f7849fb9dfe7af82105f46f69e67 # shrinks to (Term::local_pid(391, 0).unwrap(), Term::slice_to_map(&[(Term::local_pid(30308, 17678388319296).unwrap(), Term::cons(BigInt::parse_bytes(b"6069834534849553569", 10).unwrap().into_process(&process), Term::cons(BigInt::parse_bytes(b"3775693329297268667", 10).unwrap().into_process(&process), BigInt::parse_bytes(b"4923595353152865662", 10).unwrap().into_process(&process), &process), &process)), (Term::slice_to_map(&[(Term::str_to_atom("*qR🞒ੀ𑋵𞹝ਘT🕴g𝄔Z𞸡X{!a`.:&Ⱥ%k&%l🕴�Ⱥ", DoNotCare).unwrap(), Term::str_to_atom("RᏨ\'?0.𞹔{𛲙𑆝=$&U\u{cd5}?𞹯ഈ<𐠅𞸷", DoNotCare).unwrap()), (Term::slice_to_tuple(&[], &process), -145781478334950340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0_f64.into_process(&process)), (Term::local_pid(27888, 7639127267222).unwrap(), Term::str_to_atom("𞺯:8q👴🕴Ⱥ𐧷/ᢳ]tfෂ&ZѨ.Ⱥ", DoNotCare).unwrap())], &process), Term::EMPTY_LIST), (Term::function(ModuleFunctionArity { module: Term::str_to_atom("𐀃ჍȺ<", DoNotCare).unwrap(), function: Term::str_to_atom(";𞲔𐢬?~𝒯n\"_M9🥺𐨕", DoNotCare).unwrap(), arity: 167 }, code, &process), Term::subbinary(Term::slice_to_binary(&[236, 135, 13, 171, 159, 220], &process), 3, 5, 1, 7, &process))], &process))
