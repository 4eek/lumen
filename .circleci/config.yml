version: 2.1
commands:
  version_information:
    steps:
      - run:
          name: rustup version
          command: |
            rustup --version | tee rustup.version
      - run:
          name: rustc version
          command: |
            rustc --version | tee rustc.version
      - run:
          name: cargo version
          command: |
            cargo --version | tee cargo.version
  build_package:
    parameters:
      package:
        type: string
    steps:
      - run:
          name: Building << parameters.package >>
          command: cargo test --locked --no-run --package << parameters.package >>
  build:
    steps:
      - version_information
      - restore_cache:
          keys:
            - v7-x86_64-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}-lock-{{ checksum "Cargo.lock" }}
            - v7-x86_64-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}
            - v7-x86_64-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}
            - v7-x86_64-{{ arch }}-rustup-{{ checksum "rustup.version" }}
            - v7-x86_64-{{ arch }}
      - run:
          name: Building workspace
          command: cargo test --locked --no-run
      # for some reason `cargo test` or `cargo test --all` is not the same as going into each package in the workspace
      # too, but doing both the top of the workspace AND each `--package` is stable. ü§∑‚Äç‚ôÇÔ∏è
      - build_package:
          package: liblumen_alloc
      - build_package:
          package: liblumen_alloc_macros
      - build_package:
          package: liblumen_arena
      - build_package:
          package: liblumen_beam
      - build_package:
          package: liblumen_compiler
      - build_package:
          package: liblumen_core
      - build_package:
          package: liblumen_eir_interpreter
      - build_package:
          package: liblumen_syntax
      - build_package:
          package: lumen
      - build_package:
          package: lumen_runtime
      # lumen_web excluded because it only works on wasm32
      - save_cache:
          key: v7-x86_64-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}-lock-{{ checksum "Cargo.lock" }}
          paths:
            - cargo
            - target
      - persist_to_workspace:
          root: .
          paths:
            - cargo
            - examples
            - liblumen_alloc
            - liblumen_alloc_macros
            - liblumen_arena
            - liblumen_beam
            - liblumen_compiler
            - liblumen_core
            - liblumen_eir_interpreter
            - liblumen_syntax
            - lumen
            - lumen_runtime
            - lumen_web
            - target
            - .rustfmt.toml
            - Cargo.lock
            - Cargo.toml
            - Makefile
  test_package:
    parameters:
      package:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Testing << parameters.package >>
          command: cargo test --locked --offline --package << parameters.package >>
executors:
  x86_64_linux:
    parameters:
      resource_class:
        type: string
        default: medium
    docker:
      # `kronicdeth` is temporary until we get a DockerHub organization
      - image: kronicdeth/lumen-development
    resource_class: << parameters.resource_class >>
    environment:
      CARGO_HOME: cargo
jobs:
  check_formatted:
    executor: x86_64_linux
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Check formatting
          command: |
            rustfmt --version
            cargo fmt -- --check
  x86_64_linux_build:
    executor:
      name: x86_64_linux
      resource_class: xlarge
    steps:
      - checkout
      - build
  x86_64_linux_test:
    parameters:
      resource_class:
        type: string
        default: medium
      package:
        type: string
    executor:
      name: x86_64_linux
      resource_class: << parameters.resource_class >>
    steps:
      - test_package:
          package: << parameters.package >>
  wasm32_linux_lumen_web_build:
    executor:
      name: x86_64_linux
      resource_class: xlarge
    steps:
      - checkout
      - version_information
      - run:
          name: wasm-pack version
          command: |
            wasm-pack --version | tee wasm-pack.version
      - restore_cache:
          keys:
            - v7-wasm32-lumen-web-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}-lock-{{ checksum "Cargo.lock" }}-wasm-pack-{{ checksum "wasm-pack.version" }}
            - v7-wasm32-lumen-web-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}-lock-{{ checksum "Cargo.lock" }}
            - v7-wasm32-lumen-web-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}
            - v7-wasm32-lumen-web-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}
            - v7-wasm32-lumen-web-{{ arch }}-rustup-{{ checksum "rustup.version" }}
            - v7-wasm32-lumen-web-{{ arch }}
      - run:
          name: Build tests
          working_directory: "lumen_web"
          # `--no-run` for `test` will only do build
          command: wasm-pack test --chrome --firefox --headless -- --no-run
      - save_cache:
          key: v7-wasm32-lumen-web-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}-lock-{{ checksum "Cargo.lock" }}-wasm-pack-{{ checksum "wasm-pack.version" }}
          paths:
            - cargo
            - target
      - persist_to_workspace:
          root: .
          paths:
            - cargo
            - examples
            - liblumen_alloc
            - liblumen_alloc_macros
            - liblumen_arena
            - liblumen_beam
            - liblumen_compiler
            - liblumen_core
            - liblumen_eir_interpreter
            - liblumen_syntax
            - lumen
            - lumen_runtime
            - lumen_web
            - target
            - .rustfmt.toml
            - Cargo.lock
            - Cargo.toml
            - Makefile
  wasm32_linux_lumen_web_test:
    parameters:
      browser:
        type: string
    executor: x86_64_linux
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Test in << parameters.browser >>
          working_directory: "lumen_web"
          command: wasm-pack test --<< parameters.browser >> --headless
  wasm32_linux_examples_spawn_chain_build:
    executor:
      name: x86_64_linux
      resource_class: xlarge
    steps:
      - checkout
      - version_information
      - run:
          name: wasm-pack version
          command: |
            wasm-pack --version | tee wasm-pack.version
      - restore_cache:
          keys:
            - v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}-lock-{{ checksum "Cargo.lock" }}-wasm-pack-{{ checksum "wasm-pack.version" }}
            - v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}-lock-{{ checksum "Cargo.lock" }}
            - v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}
            - v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}
            - v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}
            - v7-wasm32-example-spawn-chain-{{ arch }}
      - run:
          name: Build tests
          working_directory: "examples/spawn-chain"
          # `--no-run` for `test` will only do build
          command: wasm-pack test --chrome --firefox --headless -- --no-run
      - save_cache:
          key: v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}-lock-{{ checksum "Cargo.lock" }}-wasm-pack-{{ checksum "wasm-pack.version" }}
          paths:
            - cargo
            - target
      - persist_to_workspace:
          root: .
          paths:
            - cargo
            - examples
            - liblumen_alloc
            - liblumen_alloc_macros
            - liblumen_arena
            - liblumen_beam
            - liblumen_compiler
            - liblumen_core
            - liblumen_eir_interpreter
            - liblumen_syntax
            - lumen
            - lumen_runtime
            - lumen_web
            - target
            - .rustfmt.toml
            - Cargo.lock
            - Cargo.toml
            - Makefile
  wasm32_linux_examples_spawn_chain_test:
    parameters:
      browser:
        type: string
    executor: x86_64_linux
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Test in << parameters.browser >>
          working_directory: "examples/spawn-chain"
          command: wasm-pack test --<< parameters.browser >> --headless
  wasm32_linux_examples_spawn_chain_deploy:
    executor: x86_64_linux
    steps:
      - checkout
      - version_information
      - run:
          name: wasm-pack version
          command: |
            wasm-pack --version | tee wasm-pack.version
      - restore_cache:
          keys:
            - v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}-lock-{{ checksum "Cargo.lock" }}-wasm-pack-{{ checksum "wasm-pack.version" }}
            - v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}-lock-{{ checksum "Cargo.lock" }}
            - v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}
            - v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}
            - v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}
            - v7-wasm32-example-spawn-chain-{{ arch }}
      - run:
         name: Build WebAssembly
         working_directory: "examples/spawn-chain"
         command: wasm-pack build
      - save_cache:
          key: v7-wasm32-example-spawn-chain-{{ arch }}-rustup-{{ checksum "rustup.version" }}-rustc-{{ checksum "rustc.version" }}-cargo-{{ checksum "cargo.version" }}-lock-{{ checksum "Cargo.lock" }}-wasm-pack-{{ checksum "wasm-pack.version" }}
          paths:
            - cargo
            - examples/spawn-chain/pkg
            - target
      - run:
         name: Pack distribution
         working_directory: "examples/spawn-chain"
         command: |
           pushd www
           npm install
           popd
           pushd pkg
           sudo npm link
           popd
           pushd www
           sudo npm link spawn-chain
           npm run build
           popd
      - store_artifacts:
         path: "examples/spawn-chain/www/dist"
         destination: "demos/spawn-chain"
workflows:
  version: 2
  primary:
    jobs:
      - check_formatted:
          requires:
            - x86_64_linux_build
      - x86_64_linux_build
      - x86_64_linux_test:
          name: x86_64_linux_liblumen_alloc_test
          requires:
           - x86_64_linux_build
          package: "liblumen_alloc"
      - x86_64_linux_test:
          name: x86_64_linux_liblumen_arena_test
          requires:
           - x86_64_linux_build
          package: "liblumen_arena"
      - x86_64_linux_test:
          name: x86_64_linux_liblumen_beam_test
          requires:
            - x86_64_linux_build
          package: "liblumen_beam"
      - x86_64_linux_test:
          name: x86_64_linux_liblumen_core_test
          requires:
            - x86_64_linux_build
          package: "liblumen_core"
      - x86_64_linux_test:
          name: x86_64_linux_liblumen_eir_interpreter_test
          requires:
            - x86_64_linux_build
          package: "liblumen_eir_interpreter"
      - x86_64_linux_test:
          name: x86_64_linux_liblumen_syntax_test
          requires:
            - x86_64_linux_build
          package: "liblumen_syntax"
      - x86_64_linux_test:
          name: x86_64_linux_lumen_runtime_test
          requires:
            - x86_64_linux_build
          resource_class: xlarge
          package: "lumen_runtime"
      - wasm32_linux_lumen_web_build
      - wasm32_linux_lumen_web_test:
          name: wasm32_chrome_lumen_web_test
          requires:
            - wasm32_linux_lumen_web_build
          browser: chrome
      - wasm32_linux_lumen_web_test:
          name: wasm32_firefox_lumen_web_test
          requires:
            - wasm32_linux_lumen_web_build
          browser: firefox
      - wasm32_linux_examples_spawn_chain_build
      - wasm32_linux_examples_spawn_chain_test:
          name: wasm32_chrome_examples_spawn_chain_test
          requires:
            - wasm32_linux_examples_spawn_chain_build
          browser: chrome
      - wasm32_linux_examples_spawn_chain_test:
          name: wasm32_firefox_examples_spawn_chain_test
          requires:
            - wasm32_linux_examples_spawn_chain_build
          browser: firefox
      - wasm32_linux_examples_spawn_chain_deploy

