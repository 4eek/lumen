#!/usr/bin/env bash

set -e
set -o pipefail

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd -P)"
ROOT_DIR="$(cd "$(dirname "$SCRIPT_DIR")" && pwd)"
BIN_DIR="${ROOT_DIR}/bin"
OUTPUT_DIR="${ROOT_DIR}/target/debug"
RUSTC_PATH="$(rustup which --toolchain nightly rustc)"
TOOLCHAIN_BIN_PATH="$(cd "$(dirname "$RUSTC_PATH")" && pwd -P)"
TOOLCHAIN_LIB_PATH="$(cd "$TOOLCHAIN_BIN_PATH"/../lib && pwd -P)"
RUNTIME_LIBS=(liblumen_core liblumen_crt liblumen_alloc lumen_rt_minimal)

export LLVM_SYS_90_PREFIX
LLVM_SYS_90_PREFIX="${LLVM_SYS_90_PREFIX}"
if [ -z "$LLVM_SYS_90_PREFIX" ]; then
    LLVM_SYS_90_PREFIX="$(cd "${XDG_DATA_HOME}/llvm/lumen" && pwd -P)"
fi

is_darwin="false"
build_type=""
build_static="false"
build_dynamic="false"
build_use_libcxx="false"
build_link_args=""
build_runtimes=""
extra_rustc_flags=""
extra_cargo_flags=""
host_target=""
if ! host_target="$(rustup toolchain list | grep 'default' | sed -e 's/nightly-//' -e 's/ (default)//')"; then
    echo "Unable to determine default host toolchain!"
    exit 2
fi
if [[ "$host_target" =~ "apple-darwin" ]]; then
    is_darwin="true"
fi
build_target="$host_target"
install_prefix="${BIN_DIR}/${host_target}"

function usage() {
    echo "usage: $(basename "$0") [--static] [OPTIONS..]"
    echo ""
    echo " --verbose            Build with extra verbose logging"
    echo " --debug              Build debug binary"
    echo " --release            Build release binary"
    echo " --static             Build a statically linked executable"
    echo " --dynamic            Build the compiler dynamically linked against its libraries"
    echo " --use-libcxx         Build the compiler dynamically linked against its libraries"
    echo " --target <triple>    The target triple to build for"
    echo " --install <prefix>   Install to the given prefix"
    echo ""
}

while [ $# -gt 0 ]; do
    lhs="${1%=*}"
    rhs="${1#*=}"
    # Shift once for the flag name if true
    shift_key="false"
    # Shift once for the flag value if true
    shift_value="false"
    # Shift for the flag value if true, and shift_value=true
    has_value="false"
    if [ "$lhs" = "$1" ]; then
        # No '=' to split on, so grab the next arg
        shift
        rhs="$1"
        # We already shifted for the name, but not for the value
        shift_value="true"
    else
        # We only need one shift for both key and value
        shift_key="true"
    fi
    case $lhs in
        -v | -verbose | --verbose )
            extra_cargo_flags="--verbose $extra_cargo_flags"
            ;;
        -debug | --debug )
            build_type="debug"
            extra_rustc_flags="-C opt-level=0"
            OUTPUT_DIR="${ROOT_DIR}/target/debug"
            ;;

        -release | --release )
            build_type="release"
            OUTPUT_DIR="${ROOT_DIR}/target/release"
            extra_cargo_flags="--release $extra_cargo_flags"
            ;;

        -static | --static )
            build_static="true"
            build_dynamic="false"
            ;;

        -dynamic | --dynamic )
            build_static="false"
            build_dynamic="true"
            ;;

        -use-libcxx | --use-libcxx )
            build_use_libcxx="true"
            ;;

        -target | --target )
            has_value="true"
            build_target="$rhs"
            ;;

        *)
            echo "unknown option: $1"
            usage
            exit 2
            ;;
    esac

    if [ "$shift_key" = "true" ]; then
        shift
    fi
    if [ "$has_value" = "true" ] && [ "$shift_value" = "true" ]; then
        shift
    fi
done

TOOLCHAIN_TARGET_PATH="${TOOLCHAIN_LIB_PATH}/rustlib/${build_target}"
if [ -d "${TOOLCHAIN_TARGET_PATH}" ]; then
    TOOLCHAIN_TARGET_LIB_PATH="${TOOLCHAIN_TARGET_PATH}/lib"
else
    echo "Unable to find toolchain for target ($build_target):"
    echo "  ${TOOLCHAIN_TARGET_PATH} not found"
    echo ""
    exit 2
fi
if [ "$host_target" != "$build_target" ]; then
    is_crossed="true"
    extra_cargo_flags="$extra_cargo_flags --target $build_target"
else
    is_crossed="false"
fi
if [ "$is_darwin" = "true" ]; then
    build_use_libcxx="true"
fi
if [ "$build_static" = "true" ]; then
    export LLVM_BUILD_STATIC=1
else
    #extra_rustc_flags="-C prefer-dynamic $extra_rustc_flags"
    build_link_args="-rpath,${TOOLCHAIN_TARGET_LIB_PATH}"
fi
if [ "$build_use_libcxx" = "true" ]; then
    export LLVM_USE_LIBCXX=1
fi

cd "$ROOT_DIR"

echo "Building Lumen"
echo "  host:                $host_target"
echo "  target:              $build_target"
echo "  is cross compile:    $is_crossed"
echo "  build static:        $build_static"
echo "  build w/ libc++:     $build_use_libcxx"
echo "  extra rustc flags:   ${extra_rustc_flags:-"n/a"}"
echo "  extra cargo flags:   ${extra_cargo_flags:-"n/a"}"
echo "  extra link args:     ${build_link_args:-"n/a"}"
echo ""

function build_dep(){
    # shellcheck disable=SC2086
    if ! cargo rustc ${extra_cargo_flags} -p "$1" -- -C link-args="-Wl,$build_link_args" ${extra_rustc_flags}; then
        return 1
    else
        return 0
    fi
}

# shellcheck disable=SC2086
if ! cargo rustc ${extra_cargo_flags} -p lumen -- -C link-args="-Wl,$build_link_args" ${extra_rustc_flags}; then
    exit 1
fi

# Build runtime libraries which the compiler links executables against
if [ -n "$build_runtimes" ]; then
    echo ""
    echo "Building runtime crates.."
    echo ""
    for lib in "${RUNTIME_LIBS[@]}"; do
        if ! build_dep "$lib"; then
            echo "Failed to build runtime library '$lib'"
            exit 1
        fi
    done
fi

# Construct install directory
echo ""
echo "Installing Lumen to ${install_prefix}.."
install_bin_dir="${install_prefix}/bin"
install_host_lib_dir="${install_prefix}/lib"
install_target_lib_dir="${install_prefix}/lib/lumenlib/${build_target}/lib"
mkdir -p "${install_bin_dir}"
mkdir -p "${install_host_lib_dir}"
mkdir -p "${install_target_lib_dir}"
mkdir -p "${install_prefix}"/{etc,share}
cp "${OUTPUT_DIR}/lumen" "${install_bin_dir}/lumen"
if [ "$build_dynamic" == "true" ]; then
    src_dylib="${LLVM_SYS_90_PREFIX}/lib/libLLVMcpp.dylib"
    if [ -f "${src_dylib}" ]; then
        # We have a components dylib, so prefer to use that
        dst_dylib="${install_host_lib_dir}/libLLVMcpp.dylib"
        rsync -a --copy-links --whole-file "$src_dylib" "$dst_dylib"
    else
        # Otherwise we must have built with BUILD_SHARED_LIBS
        rsync -a --copy-links --whole-file "${LLVM_SYS_90_PREFIX}/lib/"libLLVM*.dylib "${install_host_lib_dir}"/
        rsync -a --copy-links --whole-file "${LLVM_SYS_90_PREFIX}/lib/"libMLIR*.dylib "${install_host_lib_dir}"/
    fi
fi

# Copy runtime libraries
deps_dir="${OUTPUT_DIR}/deps"
for lib in "${RUNTIME_LIBS[@]}"; do
    for file in "$deps_dir/lib$lib"-*.a; do
        if [ -f "$file" ]; then
            rsync -a --copy-links --whole-file "$file" "${install_target_lib_dir}/lib${lib}.a"
        else
            echo "WARN: Unable to copy $lib! Static library not found."
        fi
    done
done

function get_build_dirs(){
    # Sort by modification time, and take the first two entries,
    # these correspond to the build script output, and the build folder itself.
    find "${OUTPUT_DIR}/build" -type d -name "$1-*" -exec stat --printf='%Y\t%n\n' {} \; \
        | sort \
        | head -n 2 \
        | cut -f2 -
}

function get_build_dir(){
    # To find the build folder, we find which of the build folders contains the artifacts,
    # since there doesn't appear to be a reliable way to determine the correct one any other way
    for dir in $(get_build_dirs "$1"); do
        local lib_dir="${dir}/out"
        if [ -d "${lib_dir}" ]; then
            echo "${lib_dir}"
            return 0
        fi
    done
    return 1
}

# Copy codegen libraries that are not statically linked
codegen_out_dir="$(get_build_dir 'liblumen_codegen')"
for file in "$codegen_out_dir/lib/"*.dylib; do
    if [ -f "$file" ]; then
        rsync -a --copy-links --whole-file "$file" "${install_host_lib_dir}"/
    fi
done

# If not on macOS, we're done
if [ "$is_darwin" = "true" ]; then
    if ! install_name_tool \
            -add_rpath '@executable_path/../lib' \
            "${install_prefix}/bin/lumen"; then
        echo "Failed to set Lumen @executable_path!"
        exit 1
    fi
fi

echo "Creating symlink.."

cd "${BIN_DIR}"
ln -sf "${install_prefix}/bin/lumen" lumen

echo "Install complete!"

exit 0
